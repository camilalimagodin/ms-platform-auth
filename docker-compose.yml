services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-auth
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - auth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.5
    container_name: keycloak-auth
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_HOSTNAME: localhost
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
    ports:
      - "8080:8080"
    command:
      - start-dev
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ms-platform-auth
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: authdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/platform
      KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/platform/protocol/openid-connect/certs
      KEYCLOAK_AUTH_URI: http://keycloak:8080/realms/platform/protocol/openid-connect/auth
      KEYCLOAK_TOKEN_URI: http://keycloak:8080/realms/platform/protocol/openid-connect/token
      KEYCLOAK_USERINFO_URI: http://keycloak:8080/realms/platform/protocol/openid-connect/userinfo
      KEYCLOAK_CLIENT_ID: platform-auth
      KEYCLOAK_CLIENT_SECRET: secret
      KEYCLOAK_REALM: platform
      SERVER_PORT: 8081
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - auth-network

networks:
  auth-network:
    driver: bridge

volumes:
  postgres_data:
